I'll help you create an admin dashboard with these features. Let's break this down into frontend and backend components.

First, let's create the backend API endpoints needed for the dashboard:

```python:backend/api/serializers.py
from rest_framework import serializers
from django.contrib.auth.models import User
from django.db.models import Count
from .models import Note

class UserStatsSerializer(serializers.ModelSerializer):
    total_notes = serializers.IntegerField()
    last_note_date = serializers.DateTimeField()

    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'first_name', 'last_name', 
                 'date_joined', 'total_notes', 'last_note_date']

class DailyNotesSerializer(serializers.Serializer):
    date = serializers.DateField()
    count = serializers.IntegerField()

class NotesPerUserSerializer(serializers.Serializer):
    user__username = serializers.CharField()
    count = serializers.IntegerField()
```

Now let's add the views to handle these endpoints:

```python:backend/api/views.py
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAdminUser
from rest_framework.response import Response
from django.contrib.auth.models import User
from django.db.models import Count, Max
from django.db.models.functions import TruncDate
from django.utils import timezone
from datetime import timedelta
from .models import Note
from .serializers import UserStatsSerializer, DailyNotesSerializer, NotesPerUserSerializer

@api_view(['GET'])
@permission_classes([IsAdminUser])
def dashboard_stats(request):
    # Get total counts
    total_users = User.objects.count()
    total_notes = Note.objects.count()
    
    return Response({
        'total_users': total_users,
        'total_notes': total_notes,
    })

@api_view(['GET'])
@permission_classes([IsAdminUser])
def user_stats(request):
    users = User.objects.annotate(
        total_notes=Count('notes'),
        last_note_date=Max('notes__created_at')
    ).order_by('-total_notes')
    
    serializer = UserStatsSerializer(users, many=True)
    return Response(serializer.data)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def notes_per_day(request):
    thirty_days_ago = timezone.now() - timedelta(days=30)
    
    daily_notes = Note.objects.filter(
        created_at__gte=thirty_days_ago
    ).annotate(
        date=TruncDate('created_at')
    ).values('date').annotate(
        count=Count('id')
    ).order_by('date')
    
    serializer = DailyNotesSerializer(daily_notes, many=True)
    return Response(serializer.data)

@api_view(['GET'])
@permission_classes([IsAdminUser])
def notes_per_user(request):
    notes_distribution = Note.objects.values(
        'author__username'
    ).annotate(
        count=Count('id')
    ).order_by('-count')
    
    serializer = NotesPerUserSerializer(notes_distribution, many=True)
    return Response(serializer.data)
```

Update the URLs:

```python:backend/api/urls.py
from django.urls import path
from . import views

urlpatterns = [
    # ... existing urls ...
    path('dashboard/stats/', views.dashboard_stats, name='dashboard-stats'),
    path('dashboard/users/', views.user_stats, name='user-stats'),
    path('dashboard/notes-per-day/', views.notes_per_day, name='notes-per-day'),
    path('dashboard/notes-per-user/', views.notes_per_user, name='notes-per-user'),
]
```

For the frontend, first install the required packages:

```bash
cd frontend
npm install @mui/material @emotion/react @emotion/styled @mui/icons-material
npm install recharts
```

Create the dashboard components:

```jsx:frontend/src/pages/Dashboard.jsx
import { useState, useEffect } from 'react';
import { 
    Container, Paper, Typography, Grid, Table, 
    TableBody, TableCell, TableContainer, TableHead, 
    TableRow, TablePagination, TextField, Box 
} from '@mui/material';
import { 
    BarChart, Bar, XAxis, YAxis, CartesianGrid, 
    Tooltip, Legend, ResponsiveContainer 
} from 'recharts';
import { format } from 'date-fns';

const Dashboard = () => {
    const [stats, setStats] = useState({ total_users: 0, total_notes: 0 });
    const [users, setUsers] = useState([]);
    const [dailyNotes, setDailyNotes] = useState([]);
    const [notesPerUser, setNotesPerUser] = useState([]);
    const [page, setPage] = useState(0);
    const [rowsPerPage, setRowsPerPage] = useState(10);
    const [searchTerm, setSearchTerm] = useState('');

    useEffect(() => {
        const fetchDashboardData = async () => {
            try {
                const [statsRes, usersRes, dailyRes, distRes] = await Promise.all([
                    fetch('/api/dashboard/stats/'),
                    fetch('/api/dashboard/users/'),
                    fetch('/api/dashboard/notes-per-day/'),
                    fetch('/api/dashboard/notes-per-user/')
                ]);

                const [statsData, usersData, dailyData, distData] = await Promise.all([
                    statsRes.json(),
                    usersRes.json(),
                    dailyRes.json(),
                    distRes.json()
                ]);

                setStats(statsData);
                setUsers(usersData);
                setDailyNotes(dailyData);
                setNotesPerUser(distData);
            } catch (error) {
                console.error('Error fetching dashboard data:', error);
            }
        };

        fetchDashboardData();
    }, []);

    const filteredUsers = users.filter(user => 
        user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Grid container spacing={3}>
                {/* Summary Statistics */}
                <Grid item xs={12} md={6}>
                    <Paper sx={{ p: 2 }}>
                        <Typography variant="h6" gutterBottom>
                            Total Users: {stats.total_users}
                        </Typography>
                        <Typography variant="h6">
                            Total Notes: {stats.total_notes}
                        </Typography>
                    </Paper>
                </Grid>

                {/* Daily Notes Chart */}
                <Grid item xs={12}>
                    <Paper sx={{ p: 2 }}>
                        <Typography variant="h6" gutterBottom>
                            Notes Created (Last 30 Days)
                        </Typography>
                        <ResponsiveContainer width="100%" height={300}>
                            <BarChart data={dailyNotes}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis 
                                    dataKey="date" 
                                    tickFormatter={(date) => format(new Date(date), 'MM/dd')}
                                />
                                <YAxis />
                                <Tooltip />
                                <Legend />
                                <Bar dataKey="count" fill="#8884d8" name="Notes Created" />
                            </BarChart>
                        </ResponsiveContainer>
                    </Paper>
                </Grid>

                {/* Users Table */}
                <Grid item xs={12}>
                    <Paper sx={{ p: 2 }}>
                        <Box sx={{ mb: 2 }}>
                            <TextField
                                label="Search Users"
                                variant="outlined"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                fullWidth
                            />
                        </Box>
                        <TableContainer>
                            <Table>
                                <TableHead>
                                    <TableRow>
                                        <TableCell>Username</TableCell>
                                        <TableCell>Email</TableCell>
                                        <TableCell align="right">Total Notes</TableCell>
                                        <TableCell>Last Note Created</TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {filteredUsers
                                        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                                        .map((user) => (
                                            <TableRow key={user.id}>
                                                <TableCell>{user.username}</TableCell>
                                                <TableCell>{user.email}</TableCell>
                                                <TableCell align="right">{user.total_notes}</TableCell>
                                                <TableCell>
                                                    {user.last_note_date ? 
                                                        format(new Date(user.last_note_date), 'MM/dd/yyyy HH:mm') : 
                                                        'No notes'}
                                                </TableCell>
                                            </TableRow>
                                        ))}
                                </TableBody>
                            </Table>
                        </TableContainer>
                        <TablePagination
                            rowsPerPageOptions={[5, 10, 25]}
                            component="div"
                            count={filteredUsers.length}
                            rowsPerPage={rowsPerPage}
                            page={page}
                            onPageChange={(e, newPage) => setPage(newPage)}
                            onRowsPerPageChange={(e) => {
                                setRowsPerPage(parseInt(e.target.value, 10));
                                setPage(0);
                            }}
                        />
                    </Paper>
                </Grid>
            </Grid>
        </Container>
    );
};

export default Dashboard;
```

Update the App.jsx to include the dashboard route:

```jsx:frontend/src/App.jsx
// ... existing imports ...
import Dashboard from './pages/Dashboard';

function App() {
    return (
        <BrowserRouter>
            <Routes>
                {/* ... existing routes ... */}
                <Route
                    path="/dashboard"
                    element={
                        <ProtectedRoute>
                            <Dashboard />
                        </ProtectedRoute>
                    }
                />
            </Routes>
        </BrowserRouter>
    );
}
```

This implementation provides:
1. A secure admin-only dashboard
2. Total user and notes statistics
3. A searchable and sortable user table with note counts
4. A bar chart showing notes created per day
5. Proper error handling and loading states
6. Responsive design using Material-UI
7. Data visualization using Recharts

To access the dashboard, navigate to `/dashboard` in your application. Make sure you're logged in as an admin user.

The dashboard is protected by the `IsAdminUser` permission class in Django, ensuring only admin users can access the data. The frontend uses Material-UI for a clean, professional look and Recharts for data visualization.
